{"version":3,"sources":["sounds/alarm.mp3","components/ActionHandler.js","components/ClockHandler.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","ActionHandler","props","disabledDecrementButton","Tooltip","title","arrow","IconButton","disabled","ArrowUpwardRounded","disabledIncrementButton","ArrowDownwardRounded","className","id","header","isClockPaused","incrementId","onClick","e","handleAction","counterId","counter","decrementId","breakBorder","border","ClockHandler","breakStyle","isSession","style","currentTime","minutes","Math","floor","toString","length","seconds","formatTime","timeRemaining","handleTimer","PlayArrowRounded","PauseRounded","resetTimer","SettingsBackupRestoreRounded","setIntervalID","initialClockState","breakLength","sessionLength","currentClockTimeinSec","App","state","setState","setInterval","calculateCurrentTime","clearInterval","soundAlarm","handleBreakSettings","action","actionSent","handleSessionSettings","resetAlarm","alarm","document","getElementById","play","pause","bind","Card","this","src","DefaultAlarm","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,mC,2SCa5B,SAASC,EAAcC,GAClC,IAAMC,EACF,kBAACC,EAAA,EAAD,CAASC,MAAM,qDAAqDC,OAAK,GACrE,8BACI,kBAACC,EAAA,EAAD,CAAYC,UAAQ,GAChB,kBAACC,EAAA,EAAD,SAMVC,EACF,kBAACN,EAAA,EAAD,CAASC,MAAM,qDAAqDC,OAAK,GACrE,8BACI,kBAACC,EAAA,EAAD,CAAYC,UAAQ,GAChB,kBAACG,EAAA,EAAD,SAMhB,OACI,yBAAKC,UAAU,gBACX,yBAAKA,UAAU,gBAAgBC,GAAIX,EAAMW,IACpCX,EAAMY,QAEX,yBAAKF,UAAU,uBAEPV,EAAMa,cAEF,kBAACR,EAAA,EAAD,CACIK,UAAU,gBACVC,GAAIX,EAAMc,YACVC,QAAS,SAACC,GAAD,OAAOhB,EAAMiB,aAAa,YAAaD,KAEhD,kBAACT,EAAA,EAAD,OAEJN,EAER,yBACIS,UAAU,eACVC,GAAIX,EAAMkB,WAETlB,EAAMmB,SAGPnB,EAAMa,cAEF,kBAACR,EAAA,EAAD,CACIK,UAAU,gBACVC,GAAIX,EAAMoB,YACVL,QAAS,SAACC,GAAD,OAAOhB,EAAMiB,aAAa,YAAaD,KAEhD,kBAACP,EAAA,EAAD,OAEJD,I,kCClDlBa,EAAc,CAChBC,OAAQ,iBAGG,SAASC,EAAavB,GAEjC,IAAMwB,EAAcxB,EAAMyB,UAA0B,GAAdJ,EAEtC,OACI,yBAAKX,UAAU,eACX,yBAAKA,UAAU,gBAAgBgB,MAAOF,GAClC,yBAAKd,UAAU,UAAUC,GAAG,eAEpBX,EAAMyB,UAAY,UAAY,SAGtC,yBAAKf,UAAU,YAAYC,GAAG,aA5B3B,SAACgB,GAChB,IAAIC,EAAUC,KAAKC,MAAMH,EAAY,IACJ,IAA9BC,EAAQG,WAAWC,SAClBJ,EAAU,IAAMA,GAEpB,IAAIK,EAAUN,EAAY,GAI1B,OAHiC,IAA9BM,EAAQF,WAAWC,SAClBC,EAAU,IAAMA,GAEd,GAAN,OAAUL,EAAV,YAAqBK,GAoBJC,CAAWlC,EAAMmC,iBAG1B,yBAAKzB,UAAU,sBACX,kBAACL,EAAA,EAAD,CAAYU,QAASf,EAAMoC,YAAazB,GAAG,cAEnCX,EAAMa,cACF,kBAACwB,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,OAGZ,kBAACjC,EAAA,EAAD,CAAYU,QAASf,EAAMuC,WAAY5B,GAAG,SACtC,kBAAC6B,EAAA,EAAD,S,IC/BhBC,E,iBATEC,EAAoB,CACtBC,YAAa,EACbC,cAAe,GACfC,sBAAuB,KACvBhC,eAAe,EACfY,WAAW,GA2NAqB,E,kDApNX,WAAY9C,GAAQ,IAAD,8BACf,cAAMA,IAYVoC,YAAc,WACP,EAAKW,MAAMlC,eACV,EAAKmC,SAAS,CACVnC,eAAgB,IAGpB4B,EAAgBQ,YAAY,EAAKC,qBAAsB,OAGvDC,cAAcV,GAEdA,EAAgB,KAEhB,EAAKO,SAAS,CACVnC,eAAgB,MA3BT,EAgCnBqC,qBAAuB,WACnB,IAAIvB,EAAc,EAAKoB,MAAMF,sBAO7B,GAAIlB,EAAc,EAAK,EAEnB,GAAG,EAAKoB,MAAMtB,UAAW,CAIrB,IAAMkB,EAAc,EAAKI,MAAMJ,YACzBC,EAAgB,EAAKG,MAAMH,cAC9BD,EAAc,EACb,EAAKK,SAAS,CACVvB,WAAW,EACXoB,sBAAqC,GAAdF,IAErBC,EAAgB,EACtB,EAAKI,SAAS,CACVvB,WAAW,EACXoB,sBAAuC,GAAhBD,KAK3BO,cAAcV,GAEdA,EAAgB,UAEjB,CAIH,IAAME,EAAc,EAAKI,MAAMJ,YACzBC,EAAgB,EAAKG,MAAMH,cAC9BA,EAAgB,EACf,EAAKI,SAAS,CACVvB,WAAW,EACXoB,sBAAuC,GAAhBD,IAErBD,EAAc,EACpB,EAAKK,SAAS,CACVvB,WAAW,EACXoB,sBAAqC,GAAdF,KAK3BQ,cAAcV,GAEdA,EAAgB,WAIxB,EAAKO,SAAS,CACVH,sBAAwBlB,EAAc,IAGrCA,EAAc,IAAO,GAAM,EAAKoB,MAAMtB,WACvC,EAAK2B,cA/FE,EAoGnBC,oBAAsB,SAACC,EAAQtC,GAC3B,IAAMuC,EAAaD,EACbX,EAAc,EAAKI,MAAMJ,YAEb,cAAfY,EACIZ,EAAc,GAAK,IAClB,EAAKK,SAAS,CACVL,YAAaA,EAAc,IAGd,cAAfY,GACHZ,EAAc,GAAK,GAClB,EAAKK,SAAS,CACVL,YAAaA,EAAc,KAjHxB,EAuHnBa,sBAAwB,SAACF,EAAQtC,GAC7B,IAAMuC,EAAaD,EACbV,EAAgB,EAAKG,MAAMH,cAEf,cAAfW,EACIX,EAAgB,GAAK,IACpB,EAAKI,SAAS,CACVJ,cAAeA,EAAgB,EAC/BC,sBAA6C,IAArBD,EAAgB,KAG3B,cAAfW,GACHX,EAAgB,GAAK,GACpB,EAAKI,SAAS,CACVJ,cAAeA,EAAgB,EAC/BC,sBAA6C,IAArBD,EAAgB,MAtIrC,EA4InBL,WAAa,WACT,EAAKS,SAASN,GAEdS,cAAcV,GAEdA,EAAgB,KAEhB,EAAKgB,cAnJU,EAsJnBL,WAAa,WAET,IAAMM,EAAQC,SAASC,eAAe,QAEtCF,EAAM/B,YAAc,EAEpB+B,EAAMG,QA5JS,EA+JnBJ,WAAa,WAET,IAAMC,EAAQC,SAASC,eAAe,QAEtCF,EAAMI,QAENJ,EAAM/B,YAAc,GAnKpB,EAAKoB,MAAQL,EAEb,EAAKN,YAAc,EAAKA,YAAY2B,KAAjB,gBACnB,EAAKb,qBAAuB,EAAKA,qBAAqBa,KAA1B,gBAC5B,EAAKV,oBAAsB,EAAKA,oBAAoBU,KAAzB,gBAC3B,EAAKP,sBAAwB,EAAKA,sBAAsBO,KAA3B,gBAC7B,EAAKxB,WAAa,EAAKA,WAAWwB,KAAhB,gBAClB,EAAKX,WAAa,EAAKA,WAAWW,KAAhB,gBAClB,EAAKN,WAAa,EAAKA,WAAWM,KAAhB,gBAVH,E,qDAyKf,OACI,yBAAKrD,UAAU,OACX,kBAACsD,EAAA,EAAD,CAAMtD,UAAU,YACZ,yBAAKA,UAAU,cAAf,kBAGA,kBAAC,EAAD,CACIE,OAAO,eACPD,GAAG,cACHG,YAAY,kBACZM,YAAY,kBACZF,UAAU,eACVC,QAAS8C,KAAKlB,MAAMJ,YACpB1B,aAAcgD,KAAKZ,oBACnBxC,cAAeoD,KAAKlB,MAAMlC,gBAE9B,kBAAC,EAAD,CACID,OAAO,iBACPD,GAAG,gBACHG,YAAY,oBACZM,YAAY,oBACZF,UAAU,iBACVC,QAAS8C,KAAKlB,MAAMH,cACpB3B,aAAcgD,KAAKT,sBACnB3C,cAAeoD,KAAKlB,MAAMlC,gBAE9B,kBAAC,EAAD,CACIA,cAAeoD,KAAKlB,MAAMlC,cAC1BsB,cAAe8B,KAAKlB,MAAMF,sBAC1BT,YAAa6B,KAAK7B,YAClBG,WAAY0B,KAAK1B,WACjBd,UAAWwC,KAAKlB,MAAMtB,aAM7B,2BAAOd,GAAG,OAAOuD,IAAKC,W,GA/MrBC,IAAMC,WCNJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFlB,SAASC,eAAe,SDyHpB,kBAAmBkB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f520088e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/alarm.0f607c6b.mp3\";","import React from 'react';\nimport './ActionHandler.scss';\nimport { \n    Card, \n    Button,\n    IconButton,\n    Tooltip\n } from '@material-ui/core';\n import {\n    ArrowUpwardRounded,\n    ArrowDownwardRounded\n } from '@material-ui/icons';\n\nexport default function ActionHandler(props) {\n    const disabledDecrementButton = (\n        <Tooltip title=\"Session in progress!, pause the Session to change.\" arrow>\n            <span>\n                <IconButton disabled>\n                    <ArrowUpwardRounded />\n                </IconButton>\n            </span>\n        </Tooltip>\n    );\n    \n    const disabledIncrementButton = (\n        <Tooltip title=\"Session in progress!, pause the Session to change.\" arrow>\n            <span>\n                <IconButton disabled>\n                    <ArrowDownwardRounded />\n                </IconButton>\n            </span>\n        </Tooltip>\n    );\n\n    return (\n        <div className=\"action-panel\">\n            <div className=\"action-header\" id={props.id}>\n                {props.header}\n            </div>\n            <div className=\"action-button-group\">\n                {\n                    props.isClockPaused ?\n                    (\n                        <IconButton \n                            className=\"action-button\" \n                            id={props.incrementId}\n                            onClick={(e) => props.handleAction('INCREMENT', e)}\n                        >\n                            <ArrowUpwardRounded />\n                        </IconButton>\n                    ) : disabledDecrementButton\n                }\n                <div \n                    className=\"action-count\" \n                    id={props.counterId}\n                >\n                    {props.counter}\n                </div>\n                {\n                    props.isClockPaused ?\n                    (\n                        <IconButton \n                            className=\"action-button\" \n                            id={props.decrementId} \n                            onClick={(e) => props.handleAction('DECREMENT', e)}\n                        >\n                            <ArrowDownwardRounded/>\n                        </IconButton>\n                    ) : disabledIncrementButton\n                }\n            </div>\n        </div>\n    );\n}","import React from 'react';\nimport './ClockHandler.scss';\nimport { IconButton } from '@material-ui/core';\nimport { PlayArrowRounded, PauseRounded, SettingsBackupRestoreRounded } from '@material-ui/icons';\n\n// Calculate the time format based on the current time in seconds\nconst formatTime = (currentTime) => {\n    let minutes = Math.floor(currentTime/60);\n    if(minutes.toString().length === 1) {\n        minutes = '0' + minutes;\n    }\n    let seconds = currentTime%60;\n    if(seconds.toString().length === 1) {\n        seconds = '0' + seconds;\n    }\n    return `${minutes}:${seconds}`;\n}\n\nconst breakBorder = {\n    border: '1px solid red'\n};\n\nexport default function ClockHandler(props) {\n    // Break styles\n    const breakStyle = !props.isSession ? breakBorder : {};\n\n    return (\n        <div className=\"clock-panel\">\n            <div className=\"session-panel\" style={breakStyle}>\n                <div className=\"session\" id=\"timer-label\">\n                    {\n                        props.isSession ? 'SESSION' : 'BREAK'\n                    }\n                </div>\n                <div className=\"time-left\" id=\"time-left\">\n                    {formatTime(props.timeRemaining)}\n                </div>\n            </div>\n            <div className=\"clock-button-group\">\n                <IconButton onClick={props.handleTimer} id=\"start_stop\">\n                    {\n                        props.isClockPaused ?\n                            <PlayArrowRounded /> :\n                            <PauseRounded />\n                    }\n                </IconButton>\n                <IconButton onClick={props.resetTimer} id=\"reset\">\n                    <SettingsBackupRestoreRounded />\n                </IconButton>\n            </div>\n        </div>\n    );\n}","import React from 'react';\nimport './App.scss';\nimport { Card } from '@material-ui/core';  \nimport ActionHandler from './ActionHandler';\nimport ClockHandler from './ClockHandler';\nimport DefaultAlarm from '../sounds/alarm.mp3';\n\nconst initialClockState = {\n    breakLength: 5,\n    sessionLength: 25,\n    currentClockTimeinSec: 1500,\n    isClockPaused: true,\n    isSession: true\n};\n\n// A Global variable to store the Interval ID for the setInterval Method\nlet setIntervalID;\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = initialClockState;\n        // Bind the action method in the constructor\n        this.handleTimer = this.handleTimer.bind(this);\n        this.calculateCurrentTime = this.calculateCurrentTime.bind(this);\n        this.handleBreakSettings = this.handleBreakSettings.bind(this);\n        this.handleSessionSettings = this.handleSessionSettings.bind(this);\n        this.resetTimer = this.resetTimer.bind(this);\n        this.soundAlarm = this.soundAlarm.bind(this);\n        this.resetAlarm = this.resetAlarm.bind(this);\n    }\n\n    handleTimer = () => {\n        if(this.state.isClockPaused) {\n            this.setState({\n                isClockPaused : false\n            });\n            // Start running the time\n            setIntervalID = setInterval(this.calculateCurrentTime, 1000);\n        } else {\n            // Clear the interval\n            clearInterval(setIntervalID);\n            // reset the interval ID\n            setIntervalID = null;\n            // Set the clock to paused state\n            this.setState({\n                isClockPaused : true\n            });\n        }\n    }\n\n    calculateCurrentTime = () => {\n        let currentTime = this.state.currentClockTimeinSec;\n        // Check the time if it is less than zero\n        // If clock is running, clear the interval\n        // Start a break, if the value of Break Length is not zero\n        // Otherwise, take the session length and start a new session if the current session length is not zero\n        // console.log('Time Remaining');\n        // console.log((currentTime - 1));\n        if((currentTime - 1) < 0) {\n            // Current Break or Session has ended\n            if(this.state.isSession) {\n                // If the current session is ended, then check for a break time\n                // if the break time is not great than zero, and session length is not greater than zero do not start a new session\n                // just reset - Check it\n                const breakLength = this.state.breakLength;\n                const sessionLength = this.state.sessionLength;\n                if(breakLength > 0) {\n                    this.setState({\n                        isSession: false,\n                        currentClockTimeinSec: breakLength * 60\n                    });\n                } else if(sessionLength > 0) {\n                    this.setState({\n                        isSession: true,\n                        currentClockTimeinSec: sessionLength * 60\n                    });\n                } else {\n                    // Remove the interval to update the clock\n                    // Clear the interval\n                    clearInterval(setIntervalID);\n                    // reset the interval ID\n                    setIntervalID = null;\n                }\n            } else {\n                // If the current session is ended, then check for a break time\n                // if the break time is not great than zero, and session length is not greater than zero do not start a new session\n                // just reset - Check it\n                const breakLength = this.state.breakLength;\n                const sessionLength = this.state.sessionLength;\n                if(sessionLength > 0) {\n                    this.setState({\n                        isSession: true,\n                        currentClockTimeinSec: sessionLength * 60\n                    });\n                } else if(breakLength > 0) {\n                    this.setState({\n                        isSession: false,\n                        currentClockTimeinSec: breakLength * 60\n                    });\n                } else {\n                    // Remove the interval to update the clock\n                    // Clear the interval\n                    clearInterval(setIntervalID);\n                    // reset the interval ID\n                    setIntervalID = null;\n                }\n            }\n        } else {\n            this.setState({\n                currentClockTimeinSec : currentTime - 1\n            });\n            // Sound the alarm\n            if(((currentTime - 1) === 0) && this.state.isSession) {\n                this.soundAlarm();\n            }\n        }\n    }\n\n    handleBreakSettings = (action, e) => {\n        const actionSent = action;\n        const breakLength = this.state.breakLength;\n        // Check for the action type and update the value\n        if(actionSent === 'INCREMENT') {\n            if(breakLength + 1 <= 60) {\n                this.setState({\n                    breakLength: breakLength + 1\n                });\n            }\n        } else if(actionSent === 'DECREMENT') {\n            if(breakLength - 1 >= 1) {\n                this.setState({\n                    breakLength: breakLength - 1\n                });\n            }\n        }\n    }\n\n    handleSessionSettings = (action, e) => {\n        const actionSent = action;\n        const sessionLength = this.state.sessionLength;\n        // Check for the action type and update the value\n        if(actionSent === 'INCREMENT') {\n            if(sessionLength + 1 <= 60) {\n                this.setState({\n                    sessionLength: sessionLength + 1,\n                    currentClockTimeinSec: (sessionLength + 1) * 60\n                });\n            }\n        } else if(actionSent === 'DECREMENT') {\n            if(sessionLength - 1 >= 1) {\n                this.setState({\n                    sessionLength: sessionLength - 1,\n                    currentClockTimeinSec: (sessionLength - 1) * 60\n                });\n            }\n        }\n    }\n\n    resetTimer = () => {\n        this.setState(initialClockState);\n        // Clear the interval\n        clearInterval(setIntervalID);\n        // reset the interval ID\n        setIntervalID = null;\n        // Reset the alarm sound\n        this.resetAlarm();\n    }\n\n    soundAlarm = () => {\n        // fetch the HTML Audio Element\n        const alarm = document.getElementById('beep');\n        // Set the current playing time to 0\n        alarm.currentTime = 0;\n        // Play the sound\n        alarm.play();\n    }\n\n    resetAlarm = () => {\n        // fetch the HTML Audio Element\n        const alarm = document.getElementById('beep');\n        // Pause the sound\n        alarm.pause();\n        // Set the current playing time to 0\n        alarm.currentTime = 0;\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Card className=\"app-card\">\n                    <div className=\"app-header\">\n                        POMODORO CLOCK\n                    </div>\n                    <ActionHandler\n                        header=\"BREAK LENGTH\"\n                        id=\"break-label\"\n                        incrementId=\"break-increment\"\n                        decrementId=\"break-decrement\"\n                        counterId=\"break-length\"\n                        counter={this.state.breakLength}\n                        handleAction={this.handleBreakSettings}\n                        isClockPaused={this.state.isClockPaused}\n                    ></ActionHandler>\n                    <ActionHandler\n                        header=\"SESSION LENGTH\"\n                        id=\"session-label\"\n                        incrementId=\"session-increment\"\n                        decrementId=\"session-decrement\"\n                        counterId=\"session-length\"\n                        counter={this.state.sessionLength}\n                        handleAction={this.handleSessionSettings}\n                        isClockPaused={this.state.isClockPaused}\n                    ></ActionHandler>\n                    <ClockHandler\n                        isClockPaused={this.state.isClockPaused}\n                        timeRemaining={this.state.currentClockTimeinSec}\n                        handleTimer={this.handleTimer}\n                        resetTimer={this.resetTimer}\n                        isSession={this.state.isSession}\n                    ></ClockHandler>\n                </Card>\n                {/* \n                    An audio element to sound horn when the remaining session time is 0\n                 */}\n                 <audio id=\"beep\" src={DefaultAlarm}></audio>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}